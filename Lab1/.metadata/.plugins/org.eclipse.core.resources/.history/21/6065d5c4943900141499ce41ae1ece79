
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

import java.io.*;

	/**
	 *Class GUI
	 *
	 * Klassen GUI är det grafiska
	 *
	 */

public class GUI extends JFrame
{
	
	private JMenuBar mbar = new JMenuBar();
	
	private JMenu menuFile = new JMenu("File");
	private JMenu menuEdit = new JMenu("Edit");
	private JMenu menuHelp = new JMenu("Help");
	
	//MenuFile
    private JMenuItem mniOpen = new JMenuItem("Open ...");
    private JMenuItem mniSave = new JMenuItem("Save ...");
    private JMenuItem mniExit = new JMenuItem("Exit");
    
	//MenuEdit
    private JMenuItem mniAdd    = new JMenuItem("Add ...");
    private JMenuItem mniRemove = new JMenuItem("Remove ...");

    //MenuItem
    private JMenuItem mniHelp  = new JMenuItem("Help ...");
    private JMenuItem mniAbout = new JMenuItem("About ...");
    
    //-------------------------------------------------------
    
    //Buttons
	private JButton funcButton;
	private JButton removeButton;

	//Labels
	private JLabel firstname;
	private JLabel lastname;
	private JLabel phonenumber;
	private JLabel message;

	//Textfield
	private JTextField fnameInput;
	private JTextField lnameInput;
	private JTextField numberInput;
	private JTextField info;
    
	//Deklarerar ett Register
	Register r;
	
	/**
	 * Method GUI
	 *
	 * Skapar ett nytt register och lägger till alla grafikobjekt som är definerade i som instansvariabler.
	 */
	public GUI()
	{
		//Skapar ett nytt Register
		r = new Register();
		
		setJMenuBar(mbar);
		
		mbar.add(menuFile);
		mbar.add(menuEdit);
		mbar.add(menuHelp);
		
		//File
		FileListener filelistener = new FileListener();
		menuFile.add(mniOpen);
		menuFile.add(mniSave);
		menuFile.addSeparator();
		menuFile.add(mniExit);
		
		mniOpen.addActionListener(filelistener);
		mniSave.addActionListener(filelistener);
		mniExit.addActionListener(filelistener);
		
		//Edit
		EditListener editlistener = new EditListener();
		menuEdit.add(mniAdd);
		menuEdit.add(mniRemove);
		
		mniAdd.addActionListener(editlistener);
		mniRemove.addActionListener(editlistener);
		//Help
		HelpListener helplistener = new HelpListener();
		menuHelp.add(mniHelp);
		menuHelp.add(mniAbout);
		
		mniHelp.addActionListener(helplistener);
		mniAbout.addActionListener(helplistener);
		
		setSize(400,200);
		
        setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
	
	public void searchWindow(){
		
		
		
		
	}
	
	
	public void configureWindow(String func){
		
		firstname 	= new JLabel("Förnamn: ", JLabel.RIGHT);
		lastname 	= new JLabel("Efternamn: ", JLabel.RIGHT);
		phonenumber = new JLabel("Telefonnr: ", JLabel.RIGHT);
		message 	= new JLabel("Meddelande: ", JLabel.RIGHT);
		
		funcButton	= new JButton(func);

		//Textfields
		fnameInput  = new JTextField("");
		lnameInput	= new JTextField("");
		numberInput = new JTextField("");
		info 		= new JTextField("");
		
		//States på Textfields
		info.setEditable(false);
		info.setForeground(Color.RED);
		
		//Skapar en Jpanel
		JPanel west = new JPanel();
		west.setLayout(new GridLayout(4,1));

		west.add(firstname);
		west.add(lastname);
		west.add(phonenumber);
		west.add(message);

		
		JPanel center = new JPanel();
		center.setLayout(new GridLayout(4,1));

		center.add(fnameInput);
		center.add(lnameInput);
		center.add(numberInput);
		center.add(info);
	
		
		JPanel east = new JPanel();
		east.setLayout(new GridLayout(1,1));
		
		east.add(funcButton);
		
		//
		ConfigureListener configurelistener = new ConfigureListener(func);
		fnameInput.addActionListener(configurelistener);
		lnameInput.addActionListener(configurelistener);
		numberInput.addActionListener(configurelistener);

		funcButton.addActionListener(configurelistener);
		
		//Skapar en Container som alla JPanels läggs i
		Container c = getContentPane();
		c.setLayout(new BorderLayout());
		c.add(west, BorderLayout.WEST);
		c.add(center, BorderLayout.CENTER);
		c.add(east, BorderLayout.EAST);
		
		setVisible(true);
		//setSize(400,600);
		
	}
	
	private class FileListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			
            if (e.getSource() == mniOpen)
            {
    			try {
    				r.load();
    				r.print();
    				System.out.println("Filen reg.txt öppnad");
    			}catch(IOException d)
    			{
    				System.out.println("Nått gick fel");
    			}
            }
            else if (e.getSource() == mniSave)
            {
    			try{
    				r.save();
    				System.out.println("Filen reg.txt sparad");
    				}catch(IOException d)
    				{
    					System.out.println("Nått gick fel");
    				}
            }
            else if (e.getSource() == mniExit)
            {
                System.exit(0);
            }
		}
	}
	private class EditListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			
            if (e.getSource() == mniAdd)
            {
            	String add = "Add";
            	configureWindow(add);
            }
            else if (e.getSource() == mniRemove)
            {
            	String remove = "Remove";
            	configureWindow(remove);
            }
		}
	}
	private class HelpListener implements ActionListener{
		public void actionPerformed(ActionEvent e){
			
			 if (e.getSource() == mniHelp)
	            {
	                JOptionPane.showMessageDialog(GUI.this, "This feature is\n" + "only available in\n" + "ShapeDrawer Pro!");
	            }
            else if (e.getSource() == mniAbout)
	            {
	                JOptionPane.showMessageDialog(GUI.this, "ShapeDrawer LE 1.1\n" + "Copyright 2013-2013\n" + "Amazing Software, Inc.");
	            }
		}
	}
	private class ConfigureListener implements ActionListener{
		
		String function;
		
		public ConfigureListener(String func){
			function = func;
		}
		
		public void actionPerformed(ActionEvent e){
			
			 if (e.getSource() == funcButton)
	            {
				 	System.out.println(function);
					String fname = fnameInput.getText();
					String lname = lnameInput.getText();
					String number = numberInput.getText();

					lname = lname.substring(0, 1).toUpperCase() + lname.substring(1).toLowerCase();
					fname = fname.substring(0, 1).toUpperCase() + fname.substring(1).toLowerCase();

					Person p = new Person(lname, fname, number);
					
					
					if(function == "Add")
					{
						if (r.insert(p) == true){
							info.setText("Posten insatt");
						}
						else{
							info.setText("Posten kan inte sättas in");
						}
					}
					else
					{
						if (r.removeFromlist(p) == true){
							info.setText("Posten är borttagen");
						}
						else{
							info.setText("Posten kunde inte tas bort");
						}
					}
				
					try{
						r.save();
						info.setText("Filen reg.txt sparad");
						}catch(IOException d)
						{
							System.out.println("Nått gick fel");
						}
	            }
			 
			 
			 

		}
	}


}
